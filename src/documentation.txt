1. Emulate a simple HTTP server
Command: python -m SimpleHTTPServer

2. Initialize angular
   top html tag
   <html ng-app>

3. Conditional (ng-if)
4. classes(ng-class)
5. Create a Angular app.
  a. Create a app folder inside js
  b. create two file "app.config.js", "app.module.js"
  c. Initialise the app make changes in the file and update appropriate changes in index.html file
  d. Include the JS files in the mail index.HTML

6. Create a Controller
  a. Create a folder inside app folder.. blog-list
  b. Inside the blog-list folder create two files "blog-list.component.js", "blog-list.module.js".
  c. Initialise the app make changes in the file and update appropriate changes in index.html and app.module.js file
  d. Include the JS files in the mail index.HTML

6. Create a Component
sample component syntax
component('nameofcomponent', {
  template:
  templateUrl:
  controller: function($scope){}
});

7. TemplateURL in component
      a. add templateUrl Field in component
      b. Create a templates folder under src folder
      c. Create all HTML files under the template folder


8. Looping in template with Ng-repeat
ng-repeat is used to loop through the array element.
Use case:

html:
<ul>
  <li ng-repeat="{{ item in items}}"></li>
</ul>

Controller:
var blogItems = [{}, {}, {}]
$scope.items = blogItems;


9. Webserver for javascript Apps.
Refer the guide on the Github Page (Coding for Entrepreneur):
https://github.com/codingforentrepreneurs/Guides/blob/master/all/angular_webserver.md


10. URL Routing Setup

  1. Include angular-route.js javascript in index.html
  2. Include angular-resource javascript in index.html
  3. Recheck the javascript link in head of html
  4. Update App module with ngresource and ngroute
  5. Update App config with routeProvider, locationProvider
  6. Update index.html with div ng-view
  7. update index.html with base tag

11. URL Routing: using templateUrl

12: URL Routing 3:
Using services '$routeParams' to optimise the code

13: Detail view with parameter.
